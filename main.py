import telebot
from telebot import types
import os
import yt_dlp
from datetime import datetime
import re
import requests
from dotenv import load_dotenv
from telebot.apihelper import ApiTelegramException

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
os.makedirs('downloads', exist_ok=True)
os.makedirs('downloads/mp3', exist_ok=True)

deezer_preview_links = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–≤—å—é

def safe_send_message(chat_id, text, **kwargs):
    try:
        return bot.send_message(chat_id, text, **kwargs)
    except ApiTelegramException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def get_menu_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ú–µ–Ω—é"))
    return markup

def download_and_send_media(url, message):
    try:
        if not url.startswith(('http://', 'https://')):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")

        bot.send_chat_action(message.chat.id, 'upload_video')

        wait_sticker_path = "waiting.webp"
        wait_msg = None
        if os.path.exists(wait_sticker_path):
            with open(wait_sticker_path, "rb") as sticker:
                wait_msg = bot.send_sticker(message.chat.id, sticker)
        else:
            wait_msg = safe_send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ...")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_template = f"downloads/{timestamp}.%(ext)s"

        ydl_opts = {
            'outtmpl': output_template,
            'format': 'best',
            'noplaylist': True,
            'quiet': True
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            file_path = ydl.prepare_filename(info)

        ext = os.path.splitext(file_path)[1].lower()
        if ext not in ['.mp4', '.webm', '.mov']:
            safe_send_message(message.chat.id, "–í–∏–¥–µ–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")
            return

        markup = types.InlineKeyboardMarkup()
        download_button = types.InlineKeyboardButton(text="üéß –°–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É", callback_data=f"extract_audio:{file_path}")
        markup.add(download_button)

        with open(file_path, 'rb') as f:
            caption = "–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ üé¨\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –º—É–∑—ã–∫—É."
            bot.send_video(message.chat.id, f, caption=caption, reply_markup=markup)

        if wait_msg:
            bot.delete_message(message.chat.id, wait_msg.message_id)

    except Exception as e:
        safe_send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")

def extract_audio(file_path, chat_id):
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        audio_output_path = f"downloads/mp3/{timestamp}_audio.mp3"
        command = f"ffmpeg -i \"{file_path}\" -vn -acodec libmp3lame -ab 192k \"{audio_output_path}\""
        os.system(command)

        with open(audio_output_path, 'rb') as audio_file:
            bot.send_audio(chat_id, audio_file, caption="üéß –í–æ—Ç –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç—Ä–µ–∫")
    except Exception as e:
        safe_send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}")

def search_music_by_name(message):
    global deezer_preview_links
    query = message.text.strip()
    if not query:
        safe_send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    search_url = f"https://api.deezer.com/search?q={query}"
    try:
        res = requests.get(search_url)
        data = res.json()
        if 'data' in data and len(data['data']) > 0:
            markup = types.InlineKeyboardMarkup()
            deezer_preview_links = {}
            for idx, track in enumerate(data['data'][:5]):
                title = track.get('title')
                artist = track.get('artist', {}).get('name')
                preview = track.get('preview')
                deezer_preview_links[str(idx)] = preview
                button_text = f"üéµ {title} - {artist}"
                markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f"deezer_preview:{idx}"))

            safe_send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        else:
            safe_send_message(message.chat.id, "üö´ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
    except Exception as e:
        safe_send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("deezer_preview:"))
def send_deezer_preview(call):
    idx = call.data.split(":", 1)[1]
    preview_url = deezer_preview_links.get(idx)

    if not preview_url:
        safe_send_message(call.message.chat.id, "‚ùå –ü—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        audio_data = requests.get(preview_url).content
        audio_path = f"downloads/mp3/{datetime.now().strftime('%Y%m%d_%H%M%S')}_preview.mp3"
        with open(audio_path, 'wb') as f:
            f.write(audio_data)
        with open(audio_path, 'rb') as audio_file:
            bot.send_audio(call.message.chat.id, audio_file, caption="üéß –ü—Ä–µ–≤—å—é —Ç—Ä–µ–∫–∞ –∏–∑ Deezer")
    except Exception as e:
        safe_send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üì∏ –°–∫–∞—á–∞—Ç—å –∏–∑ Instagram"),
        types.KeyboardButton("üé¨ –°–∫–∞—á–∞—Ç—å –∏–∑ TikTok"),
        types.KeyboardButton("üìå –°–∫–∞—á–∞—Ç—å –∏–∑ Pinterest"),
        types.KeyboardButton("‚ñ∂Ô∏è –°–∫–∞—á–∞—Ç—å –∏–∑ YouTube"),
        types.KeyboardButton("üîç –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É –ø–æ –∏–º–µ–Ω–∏"),
        types.KeyboardButton("üéµ –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ (YouTube)"),
        types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    )
    safe_send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç:\n"
        "- –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram, TikTok, Pinterest –∏ YouTube üì•\n"
        "- –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–µ–≤—å—é üé∂\n"
        "- –°–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é –ø–æ –∏–º–µ–Ω–∏ —Å YouTube üéµ\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç:\n\n"
        "üì• –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n‚Ä¢ Instagram\n‚Ä¢ TikTok\n‚Ä¢ Pinterest\n‚Ä¢ YouTube\n\n"
        "üéµ –ò–∑–≤–ª–µ–∫–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –≤–∏–¥–µ–æ\n\n"
        "üîç –ò—Å–∫–∞—Ç—å —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:\n‚Ä¢ Deezer (–ø—Ä–µ–≤—å—é 30 —Å–µ–∫)\n‚Ä¢ YouTube (–ø–æ–ª–Ω–∞—è –ø–µ—Å–Ω—è)\n\n"
        "üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é\n"
        "2. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞\n"
        "3. –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ\n\n"
        "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:\n"
        " #https://instagram.com/...\n"
        " #https://www.tiktok.com/...\n"
        " #https://www.pinterest.com/...\n"
        " #https://www.youtube.com/...\n\n"
        "üë®‚Äçüíª –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
    )
    safe_send_message(message.chat.id, help_text)

@bot.message_handler(commands=['song'])
def song_search(message):
    safe_send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube:")
    bot.register_next_step_handler(message, download_song_by_name)

def download_song_by_name(message):
    query = message.text.strip()
    if not query:
        safe_send_message(message.chat.id, "‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏.")
        return

    safe_send_message(message.chat.id, f"‚è≥ –ò—â–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫: {query}")
    search_url = f"ytsearch:{query}"
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    audio_output_path = f"downloads/mp3/{timestamp}_song.%(ext)s"

    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': audio_output_path,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'noplaylist': True,
        'quiet': True,
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([search_url])

        final_path = audio_output_path.replace('%(ext)s', 'mp3')
        with open(final_path, 'rb') as audio_file:
            bot.send_audio(message.chat.id, audio_file, caption="üé∂ –í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫!")
    except Exception as e:
        safe_send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {str(e)}")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    text = message.text.strip()
    if text in [
        "üì∏ –°–∫–∞—á–∞—Ç—å –∏–∑ Instagram",
        "üé¨ –°–∫–∞—á–∞—Ç—å –∏–∑ TikTok",
        "üìå –°–∫–∞—á–∞—Ç—å –∏–∑ Pinterest",
        "‚ñ∂Ô∏è –°–∫–∞—á–∞—Ç—å –∏–∑ YouTube"
    ]:
        safe_send_message(message.chat.id, "üìé –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ")
    elif text == "üîç –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É –ø–æ –∏–º–µ–Ω–∏":
        safe_send_message(message.chat.id, "üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        bot.register_next_step_handler(message, search_music_by_name)
    elif text == "üéµ –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ (YouTube)":
        safe_send_message(message.chat.id, "üé§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:")
        bot.register_next_step_handler(message, download_song_by_name)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_command(message)
    elif text.startswith("http"):
        download_and_send_media(text, message)
    else:
        safe_send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ."
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("extract_audio:"))
def callback_audio(call):
    file_path = call.data.split(":", 1)[1]
    extract_audio(file_path, call.message.chat.id)

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
